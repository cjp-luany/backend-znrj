import os
import time
import asyncio
import json
import httpx
import socket
from flask import Flask, render_template, send_from_directory
from threading import Thread

from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime, timedelta
from typing import List, AsyncGenerator

import nest_asyncio
from databases import Database
from fastapi.middleware.cors import CORSMiddleware
from fastcrud import crud_router, FastCRUD
from pydantic import BaseModel
from sqlalchemy import create_engine, MetaData, Table, desc, text, Column, Integer, String, BigInteger, DateTime
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import DeclarativeBase, sessionmaker

from fastapi import Depends, FastAPI, HTTPException, Request, Response
import requests


# 加载当前目录下的 .env 文件
load_dotenv()

DEBUG = True
MAX_RESULT_SIZE = 1000
ROWS_PER_PAGE = 50
SECRET_KEY = '123456FLASK'

# 数据库连接
CUR_DIR = os.path.realpath(os.path.dirname(__file__))
JOIN_DIR = os.path.join(CUR_DIR, "sqlite.db")
DATABASE_URL = "sqlite+aiosqlite:///" + JOIN_DIR  # 这里的路径应该是你的数据库文件的路径
# DATABASE_URL = "sqlite:///sqlite.db" # 这里的路径应该是你的数据库文件的路径

database = Database(DATABASE_URL)  # https://pypi.org/project/databases/ 参考database的使用方法

engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)


def python_get_now_timespan():
    return int(time.time())


# Database session dependency
async def get_session() -> AsyncGenerator[AsyncSession, None]:
    async with async_session() as session:
        yield session


# Create tables before the app start
async def lifespan(app: FastAPI):
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield


api = FastAPI(lifespan=lifespan)


responses_query = {}


class Base(DeclarativeBase):
    pass


class RecordItem(Base):
    __tablename__ = 'record'
    id = Column(BigInteger, default=python_get_now_timespan(), primary_key=True)
    create_at = Column(DateTime, default=datetime.now)
    record_cls = Column(String, default="")
    record_time = Column(BigInteger)
    record_loc = Column(String, default="")
    target_time = Column(BigInteger)
    target_loc = Column(String, default="")
    wake_time = Column(BigInteger)
    record_title = Column(String, default="")
    record_descrpt = Column(String, default="")
    rag_record = Column(String, default="")


class RecordItemCreateSchema(BaseModel):
    record_cls: str
    record_time: int
    record_loc: str
    target_time: int
    target_loc: str
    wake_time: int
    record_title: str
    record_descrpt: str
    rag_record: str


class RecordItemUpdateSchema(BaseModel):
    record_cls: str
    record_time: int
    record_loc: str
    target_time: int
    target_loc: str
    wake_time: int
    record_title: str
    record_descrpt: str
    rag_record: str


# CRUD operations setup
crud_record = FastCRUD(RecordItem)

# CRUD router setup
record_item_router = crud_router(
    session=get_session,
    model=RecordItem,
    create_schema=RecordItemCreateSchema,
    update_schema=RecordItemUpdateSchema,
    path="/api/record",
    tags=["RecordItem"]
)

api.include_router(record_item_router)


# 进行AI操作

client = OpenAI()


# Load the system message from a file
with open(os.path.join(CUR_DIR, "prompt/tools.txt"), 'r', encoding='utf-8') as file:
    system_message_content = file.read()


def chat(message_content, chat_history=[]):
    print(responses_query)

    message = {"role": "user", "content": message_content}
    chat_history.append(message)

    # 调用GPT-3模型
    response = client.chat.completions.create(
        model="gpt-4",
        messages=chat_history,
        temperature=0,  # 模型输出的随机性，0 表示随机性最小
        tools=[{
            "type": "function",
            "function": {
                "name": "http_query",
                "description": "use web interface to query some data",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": f"""
                                    SQL insert for save user input.
                                    SQL should be written using this database schema:
                                    {database_schema_string}
                                    The insert should be returned in plain text, not in JSON.
                                    The insert should only contain grammars supported by SQLite.
                                    """,
                        }
                    },
                    "required": ["query"],
                }
            }
        }],
        # 返回消息的格式，text 或 json_object
        response_format={"type": "text"},
    )
    print(response.choices[0].message.content)
    chat_history.append(response.choices[0].message)

    # Check if 'record' is in user message
    if 'record' in message_content.lower():
        print("Record Function Called")
        record(message['content'])

    return chat_history


database_schema_string = "aaa"


def record(content):
    # 在此处进行你的记录功能
    print(f"Recording content: {content}")


def start_loop():

    # Example use
    chat_history_1 = [
        {"role": "system", "content": system_message_content},
    ]

    while True:
        user_input = input("Enter message: ")
        chat_history_1 = chat(user_input, chat_history_1)


@api.get("/custom/get_items")
async def query_select(db: AsyncSession = Depends(get_session)):
    item = await crud_record.get_multi(db,limit=None)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    return item


async def db_query():
    global responses_query
    responses_query = await requests.get("http://localhost:6200/custom/get_items")


def query_during_chat():
    """
    # do sql select and upload to embed database
    # use anything llm api to query
    """

    try:
        loop = asyncio.get_event_loop()
    except Exception:
        loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    ret = loop.run_until_complete(db_query())

    print(ret)


    return


    # try:
    #     loop = asyncio.get_event_loop()
    # except Exception:
    #     loop = asyncio.new_event_loop()
    # asyncio.set_event_loop(loop)

    # loop.run_until_complete(query_select(url_1))

    # url_1 = "http://localhost:6200/api/record/get_multi"
    # async with httpx.AsyncClient() as client:
    #     response_1 = client.post(url, json=json_payload, headers=headers, timeout=None)
    #
    #
    #
    # my_payload = {
    #     "conversation": {
    #         "agent": "Ai Helper",
    #         "user": "message.message"
    #     },
    #     "system": {
    #         "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    #         "loc": "116.338611,39.992552"
    #     }
    # }
    # json_payload = {
    #     "message": json.dumps(my_payload),
    #     "mode": "chat"
    # }
    # url = "http://localhost:3001/api/v1/workspace/norag/chat"  # 替换为实际的目标URL
    # bearer_token: str = "WM4CRFV-GFPMZRE-GM9FD7E-RGPWXJN"
    # headers = {}
    # if bearer_token:
    #     headers["Authorization"] = f"Bearer {bearer_token}"
    #
    # async with httpx.AsyncClient() as client:
    #     response = client.post(url, json=json_payload, headers=headers, timeout=None)
    #
    # if response.status_code != 200:
    #     raise HTTPException(status_code=response.status_code, detail="Failed to send message")








# 启动fastapi
def run_fastapi():
    import uvicorn
    uvicorn.run(api, host="0.0.0.0", port=6200, loop="asyncio")


# cors名单
origins = [
    "http://127.0.0.1:8102",
    "http://localhost:8102",
    "http://127.0.0.1:6102",
    "http://127.0.0.1:6200"
    "http://127.0.0.1:6103",
    "http://127.0.0.1:6202",
    "http://127.0.0.1:6203",
    "http://localhost:6102",
    "http://localhost:6103",
    "http://localhost:6202",
    "http://localhost:6203"
]


# cors中间件
api.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# 按装订区域中的绿色按钮以运行脚本。
if __name__ == '__main__':
    print('PyCharm')

    # 启动fastapi
    thread_fast = Thread(target=run_fastapi)
    thread_fast.start()

    thread_test = Thread(target=db_query)
    thread_test.start()

    start_loop()


'''
是否使用flask
'''
# # 创建flask实例，指定静态文件夹
# app = Flask(__name__,
#             static_folder=os.path.join(CUR_DIR, 'static'),
#             template_folder=os.path.join(CUR_DIR, 'templates'))
# # 启动flask
# def run_flask():
#     app.run(host='0.0.0.0', port=6103)
#
# # 路由控制
# @app.route('/', defaults={'path': ''})
# @app.route('/<path:path>')
# def serve(path):
#     if path != "" and os.path.exists(app.static_folder + '/' + path):
#         return send_from_directory(app.static_folder, path)
#     else:
#         return send_from_directory(app.static_folder, 'index.html')